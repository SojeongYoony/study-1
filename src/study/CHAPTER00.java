package study;

public class CHAPTER00 {

	public static void main(String[] args) {

	/* 
	 		[Git & Git Hub]
	 	1. Git 이란?			-- 로컬에서 버전 관리 시스템을 운영하는 방식
	 	   - 분산 버전관리 시스템(Distribute Version Control Systems - DVCS)
				** 버전 관리 시스템(VCS)
				   - 코드가 변경된 부분을 모두 기억해준다는 의미
				   - 코드가 수정될 때마다 파일로 일일이 따로 저장하거나 수동으로 백업하기 매우 번거로움
				   	 --> 이런 일을 대신 해줌.
				   - 어떤 부분이 수정됐는지 쉽게 볼 수 있고 수정된 부분을 이전 버전으로 롤백 하는 등 편리한 기능 보유
				   - 코드 수정에 따른 위험성을 줄일 수 있음
	 	   
	 	   - 컴퓨터 파일의 변경사항을 추적하고 여러명의 사용자들 간에 파일에 대한 작업을 조율하는데 사용
	 	   - Git 공식 사이트 한글메뉴얼 : https://git-scm.com/book/ko/v2
	 	   * 즉, 여러명의 개발자가 하나의 소프트웨어 개발 프로젝트에 참여할 때, 소스 코드를 관리하는데 사용
	 	
	 	2. Git Hub이란?			-- 저장소를 깃허브에서 제공해주는 클라우드 서버를 이용
	 	   - 클라우드 방식으로 관리되는 버전 관리 시스템(VCS)
	 	   - 자체 구축이 아닌 빌려쓰는 클라우드 개념
	 	   - 오픈소스는 일정 부분 무료로 저장 가능, 아닐 경우 유료 사용
	 	   
	 	3. Git 기본 용어
	 		- Repository   : 저장소. 저장소는 히스토리, 태그, 소스의 가지치기 혹은 branch에 따라 버전을 저장.
	 		- Working Tree : 저장소를 어느 한 시점을 바라보는 작업자의 현재 시점.
	 		- Staging Area : 저장소에 커밋하기 전에 커밋을 준비하는 위치
	 		- Commit 	   : 현재 변경된 작업 상태를 점검을 마치면 확정하고 저장소에 저장하는 작업
	 		- Head 		   : 현재 작업중인 Branch를 가리킴
	 		- Branch 	   : 가지 또는 분기점. 작업을 할때에 현재 상태를 복사하여 Branch에서 작업 한 후, 
	 				   	     완전 하다 싶을 때 Merge 함
	 		- Merge 	   : 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미한다.
	 		
	 	4. Git 기본 명령어
	 		- git help   : 도움말 			
	 						** 가장 많이 사용하는 21개의 깃 명령어 출력
	 		  				ex) git help[궁금한 명령어] 타이핑 시, 해당 깃 명령어의 설정과 사용에 대한 도움말 출력
	 		- git init   : 깃 저장소 초기화.	
	 						** 이 명령어를 입력한 후에야 추가적인 깃 명령어 입력 가능
	 		- git status : 저장소 상태 체크.
	 						ex) 1. 어떤 파일이 저장소 안에 있는지, 
	 							2. 커밋이 필요한 변경사항이 있는지, 
	 							3. 현재 저장소의 어떤 브랜치에서 작업하고 있는지 등 상태정보 출력
	 
	 */
		
		
	}

}
